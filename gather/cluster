#!/usr/bin/python3

"""
Connect to a DX cluster and store all spots in a PostgreSQL database

Copyright (C) 2021, 2024 Christoph Berg DF7CB
License: MIT
"""

import psycopg
import socket
import select
import re
import clusterutils
import argparse

argparser = argparse.ArgumentParser(description="Connect to DX cluster and store spots in PostgreSQL")
argparser.add_argument("-s", "--source", help="Source name in spots", default='cluster')
argparser.add_argument("-c", "--cluster", help="Cluster name in spots")
argparser.add_argument("-m", "--mycall")
argparser.add_argument("-C", "--cmd", nargs='*', help="Send cluster command")
argparser.add_argument("host")
argparser.add_argument("port", default=8000, nargs='?')
args = argparser.parse_args()

if not args.cluster:
    args.cluster = args.host.split('.')[-2]
if not args.mycall:
    m = re.search(r'(\d)', args.cluster)
    args.mycall = "DA0RR-" + m.group(1)

conn = psycopg.connect(f"service=rrdxa application_name={args.source}/{args.cluster}", autocommit=True)
cur = conn.cursor()

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((args.host, int(args.port)))
login = False

# DX de IK5WOB:     3520.0  IQ5PJ        Coltano Marconi Award          1656Z JN53
# DX de W2CCC:     50313.0  WA5TKU       em13<>fn23 ft8                 1656Z FN23
# DX de EA5IKT:     7057.0  EA4TL        dme-10059 cq                   1656Z
# DX de ON4PE:     21074.0  PY4PDO       Db -7                          1656Z JO10
# DX de EA1JW:      7062.0  EA1FHQ       EO-1467 DME-33043              1656Z
# DX de F4CXO:     28019.9  PP5VZ        JN26PP<>GG52RJ 529             1657Z
# DX de EA5D:      14081.0  N8JJM        FT4 -11 IM99XX<>EN72           1657Z IM99
# DX de KE1DX:     21029.8  LU/CE3CT                                    1657Z FN31

def dx(msg):
    global login
    line = msg.decode(encoding='UTF-8', errors='replace')
    spot = clusterutils.parse_spot(line, source=args.source, cluster=args.cluster)

    if spot:
        if spot['info'] and re.search(r'BEACON|NCDXF B', spot['info']): return # ignore beacons

        clusterutils.parse_cluster_info(spot['info'], spot)
        clusterutils.insert_spot(cur, spot)

    else:
        print("<", line.replace('\a', '^G'), flush=True)

        if not login and ('login:' in line or 'enter your call:' in line):
            for i in [args.mycall] + args.cmd:
                print(i)
                s.send(i.encode('UTF-8') + b"\r\n")
            login = True

buf = b""
while True:
    r, w, x = select.select([s], [], [], None)
    if s in r:
        data = s.recv(1024)
        if not data:
            exit(1)
        buf += data
        while b"\r\n" in buf:
            pos = buf.index(b"\r\n")
            dx(buf[:pos])
            buf = buf[pos+2:]
        if b'login:' in buf:
            dx(buf)
            buf = b""
