#!/usr/bin/python3

import json
import paho.mqtt.client as mqtt
import psycopg
import clusterutils

conn = psycopg.connect("service=rrdxa application_name=pskreporter", autocommit=True)
cur = conn.cursor()

# The callback for when the client receives a CONNACK response from the server.
#mqtt 2.0: def on_connect(client, userdata, flags, reason_code, properties):
def on_connect(client, userdata, flags, reason_code):
    print(f"Connected with result code {reason_code}")
    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe("pskr/filter/v2/+/+/+/+/+/+/+/+")

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    #print(msg.topic+" "+str(msg.payload))
    data = json.loads(msg.payload)

    spot = {'source': 'pskreporter',
            'spot_time': clusterutils.int_to_timestamp(data['t']),
            'spotter': data['sc'],
            'spotter_cty': data['sa'],
            'spotter_loc': data['sl'].upper(),
            'qrg': data['f'] / 1000.0,
            'dx': data['rc'],
            'dx_cty': data['ra'],
            'dx_loc': data['rl'].upper(),
            'mode': data['md'],
            'db': data['rp'],
            }

    clusterutils.insert_spot(cur, spot)

mqttc = mqtt.Client()
mqttc.on_connect = on_connect
mqttc.on_message = on_message

mqttc.connect("mqtt.pskreporter.info", 1883, 60)

# Blocking call that processes network traffic, dispatches callbacks and
# handles reconnecting.
# Other loop*() functions are available that give a threaded interface and a
# manual interface.
mqttc.loop_forever()
