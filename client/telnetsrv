#!/usr/bin/python3

import datetime
import json
import psycopg
import re
import select
import sys
import clusterutils

def prompt():
    now = datetime.datetime.now(tz=datetime.UTC).strftime("%d-%b-%Y %H%MZ")
    print(f"{call} de DA0RR {now} RRDXAi >", end="\r\n", flush=True)

def handle_cmd(line):
    if line == '':
        pass
    elif spot := clusterutils.parse_spot(cmd, source='cluster', cluster=call):
        if '#' in spot['spotter']:
            spot['source'] = 'rbn'
        clusterutils.parse_cluster_info(spot['info'], spot)
        clusterutils.insert_spot(cur, spot)
        print("Spot received:", spot, file=sys.stderr, flush=True)
    else:
        print("Unknown command", cmd, end='\r\n', flush=True)
        print("Unknown command", cmd, file=sys.stderr, flush=True)

try:
    # ask for call (used as channel name)
    print("login: ", end='', flush=True)
    call = input().strip().upper()
    if not call or not re.match(r'[A-Z0-9/#-]{3,12}$', call):
        print("No call, no login.", end='\r\n', flush=True)
        exit(0)

    # check if channel exists, else use "cluster"
    conn = psycopg.connect("service=rrdxa application_name=telnetsrv", autocommit=True)
    cur = conn.cursor()
    cur.execute("select true from rule where channel = %s", [call])
    have_channel = cur.fetchone()
    channel = call if have_channel else 'cluster'
    channel_ident = psycopg.sql.Identifier(channel).as_string(conn)

    # listen first so we don't miss any notification while old spots are loaded
    conn.execute(f"listen {channel_ident}");

    # print welcome message
    print(f"{call} connected on channel {channel}", file=sys.stderr, flush=True)
    print(f"Hello {call}, this is DA0RR", end="\r\n", flush=True)
    print(f"Listening for spots on channel {channel_ident}", end="\r\n", flush=True)
    print(f"Loading up to 500 old spots", end="\r\n", flush=True)
    prompt()

    # load up to 500 spots from the last 30min
    cur.execute("""select data from
        (select spot_time, jsonb_set_lax(data, '{spots}', jsonb_build_array(data['spots'][0])) as data
         from bandmap join rule on data @@ jsfilter
         where channel = %s and spot_time > now() - '30min'::interval
         order by spot_time desc limit 500)
        order by spot_time""", [channel])
    for (m,) in cur.fetchall():
        print(clusterutils.format_spot(m), end='\r\n', flush=True)

    # listen again to put the channel name into pg_stat_activity.query
    conn.execute(f"listen {channel_ident}");

    # main loop
    while True:
        r, w, x = select.select([conn, sys.stdin], [], [])
        if conn in r:
            notify = next(conn.notifies())
            m = json.loads(notify.payload)
            print(clusterutils.format_spot(m), end='\r\n', flush=True)
        if sys.stdin in r:
            cmd = input().strip()
            handle_cmd(cmd)
            prompt()

except (BrokenPipeError, ConnectionResetError, EOFError, KeyboardInterrupt, UnicodeDecodeError):
    pass
