#!/usr/bin/python3

import psycopg
import json
import sys

def print_spot(m):
    spotter = m['spots'][0]['spotter'] if 'spots' in m else '??'
    qrg = m.get('qrg') or '??'
    dx = m.get('dx') or '??'
    info = m.get('info') or ''
    if not info:
        if 'wpm' in m and m['wpm'] is not None:
            info += f"{m['wpm']} wpm "
    ts = m['spot_time'][11:13] + m['spot_time'][14:16]
    spotter_loc = m.get('spotter_loc') or ''
    # try to match the original cluster column layout as close as possible, but without truncating dx and qrg
    # DX de IK5WOB:     3520.0  IQ5PJ        Coltano Marconi Award          1656Z JN53
    print(f"DX de {spotter[:9]+':':10} {qrg:7}  {dx:12} {info[:30]:30} {ts}Z {spotter_loc}", end="\r\n", flush=True)

print("Login: ", end='', flush=True)
call = input()
if not call:
    exit(0)
call = call.strip().upper()
print(f"Hello {call}", end="\r\n", flush=True)
print(f"{call} connected", file=sys.stderr)

conn = psycopg.connect("service=rrdxa application_name=telnetsrv", autocommit=True)
cur = conn.cursor()
channel = psycopg.sql.Identifier(call).as_string(conn)

# listen first so we don't miss any notification while old spots are loaded
conn.execute(f"listen {channel}");

# load up to 500 spots from the last 30min
cur.execute("""select data from
    (select spot_time, jsonb_set_lax(data, '{spots}', jsonb_build_array(data['spots'][0])) as data
     from bandmap join rule on data @@ jsfilter
     where channel = %s and spot_time > now() - '30min'::interval
     order by spot_time desc limit 500)
    order by spot_time""", [call])
for (m,) in cur.fetchall():
    print_spot(m)

# listen again to put the channel name into pg_stat_activity.query
conn.execute(f"listen {channel}");

# main loop
try:
    for notify in conn.notifies():
        m = json.loads(notify.payload)
        print_spot(m)
except (BrokenPipeError, KeyboardInterrupt):
    pass

print(f"{call} disconnected", file=sys.stderr)
